// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Recipes.Infrastructure.Persistance;

#nullable disable

namespace Recipes.Infrastructure.Migrations
{
    [DbContext(typeof(RecipesDbContext))]
    [Migration("20251019205543_FixDishRelationShip")]
    partial class FixDishRelationShip
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DishInfoAllergy", b =>
                {
                    b.Property<int>("DishInfoId")
                        .HasColumnType("int");

                    b.Property<int>("AllergyId")
                        .HasColumnType("int");

                    b.HasKey("DishInfoId", "AllergyId");

                    b.HasIndex("AllergyId");

                    b.ToTable("DishInfoAllergies", (string)null);
                });

            modelBuilder.Entity("DishInfoCuisine", b =>
                {
                    b.Property<int>("DishInfoId")
                        .HasColumnType("int");

                    b.Property<int>("CuisineId")
                        .HasColumnType("int");

                    b.HasKey("DishInfoId", "CuisineId");

                    b.HasIndex("CuisineId");

                    b.ToTable("DishInfoCuisines", (string)null);
                });

            modelBuilder.Entity("DishInfoTag", b =>
                {
                    b.Property<int>("DishInfoId")
                        .HasColumnType("int");

                    b.Property<int>("DishTagId")
                        .HasColumnType("int");

                    b.HasKey("DishInfoId", "DishTagId");

                    b.HasIndex("DishTagId");

                    b.ToTable("DishInfoTags", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Recipes.Domain.Entities.Business.Cooking.Advanced.Macronutrients", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DishInfoId")
                        .HasColumnType("int");

                    b.Property<float?>("Fiber")
                        .HasColumnType("real");

                    b.Property<short?>("Kcal")
                        .HasColumnType("smallint");

                    b.Property<float?>("Protein")
                        .HasColumnType("real");

                    b.Property<float?>("Salt")
                        .HasColumnType("real");

                    b.Property<float?>("SaturatedFat")
                        .HasColumnType("real");

                    b.Property<float?>("Sugars")
                        .HasColumnType("real");

                    b.Property<float?>("TransFat")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("DishInfoId")
                        .IsUnique();

                    b.ToTable("Macronutrients", (string)null);
                });

            modelBuilder.Entity("Recipes.Domain.Entities.Business.Cooking.Advanced.Micronutrients", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float?>("Calcium")
                        .HasColumnType("real");

                    b.Property<int>("DishInfoId")
                        .HasColumnType("int");

                    b.Property<float?>("Iron")
                        .HasColumnType("real");

                    b.Property<float?>("Potassium")
                        .HasColumnType("real");

                    b.Property<float?>("Sodium")
                        .HasColumnType("real");

                    b.Property<float?>("VitaminD")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("DishInfoId")
                        .IsUnique();

                    b.ToTable("Micronutrients", (string)null);
                });

            modelBuilder.Entity("Recipes.Domain.Entities.Business.Cooking.Dish", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CookId");

                    b.ToTable("Dishes", (string)null);
                });

            modelBuilder.Entity("Recipes.Domain.Entities.Business.Cooking.DishInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DishId")
                        .HasColumnType("int");

                    b.Property<int>("LevelId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<short>("ServingSize")
                        .HasColumnType("smallint");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.Property<byte>("Yield")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("DishId")
                        .IsUnique();

                    b.HasIndex("LevelId");

                    b.ToTable("DishInfos", (string)null);
                });

            modelBuilder.Entity("Recipes.Domain.Entities.Business.Cooking.Image", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DishInfoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DishInfoId");

                    b.ToTable("Images", (string)null);
                });

            modelBuilder.Entity("Recipes.Domain.Entities.Business.Cooking.IngredientUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("DishInfoId")
                        .HasColumnType("int");

                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.Property<int>("MeasurementUnitId")
                        .HasColumnType("int");

                    b.Property<float>("Value")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("DishInfoId");

                    b.HasIndex("IngredientId");

                    b.HasIndex("MeasurementUnitId");

                    b.ToTable("IngredientUnits", (string)null);
                });

            modelBuilder.Entity("Recipes.Domain.Entities.Business.Cooking.Links.FavoriteDish", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("DishId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("UserId", "AddedAtUtc");

                    b.HasIndex("UserId", "DishId")
                        .IsUnique();

                    b.ToTable("FavoriteDishes", (string)null);
                });

            modelBuilder.Entity("Recipes.Domain.Entities.Business.Cooking.Plan", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("DishId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<TimeSpan>("TimePoint")
                        .HasColumnType("time");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Yield")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("UserId");

                    b.ToTable("Plans", (string)null);
                });

            modelBuilder.Entity("Recipes.Domain.Entities.Business.Cooking.Step", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("DishInfoId")
                        .HasColumnType("int");

                    b.Property<string>("FullDescription")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<byte>("Number")
                        .HasColumnType("tinyint");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("DishInfoId");

                    b.ToTable("Steps", (string)null);
                });

            modelBuilder.Entity("Recipes.Domain.Entities.Business.Enumerations.Allergy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Allergies", (string)null);
                });

            modelBuilder.Entity("Recipes.Domain.Entities.Business.Enumerations.Cuisine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Cuisines", (string)null);
                });

            modelBuilder.Entity("Recipes.Domain.Entities.Business.Enumerations.DishTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("DishTags", (string)null);
                });

            modelBuilder.Entity("Recipes.Domain.Entities.Business.Enumerations.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Ingredients", (string)null);
                });

            modelBuilder.Entity("Recipes.Domain.Entities.Business.Enumerations.Level", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Levels", (string)null);
                });

            modelBuilder.Entity("Recipes.Domain.Entities.Business.Enumerations.MeasurementUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("MeasurementUnits", (string)null);
                });

            modelBuilder.Entity("Recipes.Domain.Entities.Business.Social.Comment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("Likes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments", (string)null);
                });

            modelBuilder.Entity("Recipes.Domain.Entities.Business.Social.MediaUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostId")
                        .IsUnique();

                    b.ToTable("MediaUnits", (string)null);
                });

            modelBuilder.Entity("Recipes.Domain.Entities.Business.Social.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("DishId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts", (string)null);
                });

            modelBuilder.Entity("Recipes.Domain.Entities.Business.Social.SocialData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Dislikes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Likes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostId")
                        .IsUnique();

                    b.ToTable("SocialData", (string)null);
                });

            modelBuilder.Entity("Recipes.Domain.Entities.Governance.Enumeration.CommentReportClass", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("CommentReportClasses", (string)null);
                });

            modelBuilder.Entity("Recipes.Domain.Entities.Governance.Enumeration.DishReportClass", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("DishReportClasses", (string)null);
                });

            modelBuilder.Entity("Recipes.Domain.Entities.Governance.Enumeration.PostReportClass", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("PostReportClasses", (string)null);
                });

            modelBuilder.Entity("Recipes.Domain.Entities.Governance.Enumeration.ReportStatus", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ReportStatuses", (string)null);
                });

            modelBuilder.Entity("Recipes.Domain.Entities.Governance.Moderation.CommentReportData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<Guid>("ModeratorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("ReportId")
                        .HasColumnType("bigint");

                    b.Property<short>("StatusId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("ModeratorId");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.HasIndex("StatusId");

                    b.ToTable("CommentReportData", (string)null);
                });

            modelBuilder.Entity("Recipes.Domain.Entities.Governance.Moderation.DishReportData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<Guid>("ModeratorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("ReportId")
                        .HasColumnType("bigint");

                    b.Property<short>("StatusId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("ModeratorId");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.HasIndex("StatusId");

                    b.ToTable("DishReportData", (string)null);
                });

            modelBuilder.Entity("Recipes.Domain.Entities.Governance.Moderation.PostReportData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<Guid>("ModeratorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("ReportId")
                        .HasColumnType("bigint");

                    b.Property<short>("StatusId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("ModeratorId");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.HasIndex("StatusId");

                    b.ToTable("PostReportData", (string)null);
                });

            modelBuilder.Entity("Recipes.Domain.Entities.Governance.Report.CommentReport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<short>("ClassId")
                        .HasColumnType("smallint");

                    b.Property<long>("CommentId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("CommentId");

                    b.HasIndex("UserId");

                    b.ToTable("CommentReports", (string)null);
                });

            modelBuilder.Entity("Recipes.Domain.Entities.Governance.Report.DishReport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<short>("ClassId")
                        .HasColumnType("smallint");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("DishId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("DishId");

                    b.HasIndex("UserId");

                    b.ToTable("DishReports", (string)null);
                });

            modelBuilder.Entity("Recipes.Domain.Entities.Governance.Report.PostReport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<short>("ClassId")
                        .HasColumnType("smallint");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("PostReports", (string)null);
                });

            modelBuilder.Entity("Recipes.Domain.Entities.UserContext.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("DishInfoAllergy", b =>
                {
                    b.HasOne("Recipes.Domain.Entities.Business.Enumerations.Allergy", null)
                        .WithMany()
                        .HasForeignKey("AllergyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Recipes.Domain.Entities.Business.Cooking.DishInfo", null)
                        .WithMany()
                        .HasForeignKey("DishInfoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DishInfoCuisine", b =>
                {
                    b.HasOne("Recipes.Domain.Entities.Business.Enumerations.Cuisine", null)
                        .WithMany()
                        .HasForeignKey("CuisineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Recipes.Domain.Entities.Business.Cooking.DishInfo", null)
                        .WithMany()
                        .HasForeignKey("DishInfoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DishInfoTag", b =>
                {
                    b.HasOne("Recipes.Domain.Entities.Business.Cooking.DishInfo", null)
                        .WithMany()
                        .HasForeignKey("DishInfoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Recipes.Domain.Entities.Business.Enumerations.DishTag", null)
                        .WithMany()
                        .HasForeignKey("DishTagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Recipes.Domain.Entities.UserContext.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Recipes.Domain.Entities.UserContext.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Recipes.Domain.Entities.UserContext.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Recipes.Domain.Entities.UserContext.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Recipes.Domain.Entities.Business.Cooking.Advanced.Macronutrients", b =>
                {
                    b.HasOne("Recipes.Domain.Entities.Business.Cooking.DishInfo", "DishInfo")
                        .WithOne("Macronutrients")
                        .HasForeignKey("Recipes.Domain.Entities.Business.Cooking.Advanced.Macronutrients", "DishInfoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DishInfo");
                });

            modelBuilder.Entity("Recipes.Domain.Entities.Business.Cooking.Advanced.Micronutrients", b =>
                {
                    b.HasOne("Recipes.Domain.Entities.Business.Cooking.DishInfo", "DishInfo")
                        .WithOne("Micronutrients")
                        .HasForeignKey("Recipes.Domain.Entities.Business.Cooking.Advanced.Micronutrients", "DishInfoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DishInfo");
                });

            modelBuilder.Entity("Recipes.Domain.Entities.Business.Cooking.Dish", b =>
                {
                    b.HasOne("Recipes.Domain.Entities.UserContext.ApplicationUser", "Cook")
                        .WithMany("Dishes")
                        .HasForeignKey("CookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cook");
                });

            modelBuilder.Entity("Recipes.Domain.Entities.Business.Cooking.DishInfo", b =>
                {
                    b.HasOne("Recipes.Domain.Entities.Business.Cooking.Dish", "Dish")
                        .WithOne("DishInfo")
                        .HasForeignKey("Recipes.Domain.Entities.Business.Cooking.DishInfo", "DishId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Recipes.Domain.Entities.Business.Enumerations.Level", "Level")
                        .WithMany("DishInfo")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Level");
                });

            modelBuilder.Entity("Recipes.Domain.Entities.Business.Cooking.Image", b =>
                {
                    b.HasOne("Recipes.Domain.Entities.Business.Cooking.DishInfo", "DishInfo")
                        .WithMany("Images")
                        .HasForeignKey("DishInfoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DishInfo");
                });

            modelBuilder.Entity("Recipes.Domain.Entities.Business.Cooking.IngredientUnit", b =>
                {
                    b.HasOne("Recipes.Domain.Entities.Business.Cooking.DishInfo", "DishInfo")
                        .WithMany("IngredientUnits")
                        .HasForeignKey("DishInfoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Recipes.Domain.Entities.Business.Enumerations.Ingredient", "Ingredient")
                        .WithMany("IngredientUnits")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Recipes.Domain.Entities.Business.Enumerations.MeasurementUnit", "MeasurementUnit")
                        .WithMany("IngredientUnits")
                        .HasForeignKey("MeasurementUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DishInfo");

                    b.Navigation("Ingredient");

                    b.Navigation("MeasurementUnit");
                });

            modelBuilder.Entity("Recipes.Domain.Entities.Business.Cooking.Links.FavoriteDish", b =>
                {
                    b.HasOne("Recipes.Domain.Entities.Business.Cooking.Dish", "Dish")
                        .WithMany("Favorites")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Recipes.Domain.Entities.UserContext.ApplicationUser", "User")
                        .WithMany("FavoriteDishes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Recipes.Domain.Entities.Business.Cooking.Plan", b =>
                {
                    b.HasOne("Recipes.Domain.Entities.Business.Cooking.Dish", "Dish")
                        .WithMany("Plans")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Recipes.Domain.Entities.UserContext.ApplicationUser", "Cook")
                        .WithMany("Plans")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cook");

                    b.Navigation("Dish");
                });

            modelBuilder.Entity("Recipes.Domain.Entities.Business.Cooking.Step", b =>
                {
                    b.HasOne("Recipes.Domain.Entities.Business.Cooking.DishInfo", "DishInfo")
                        .WithMany("Steps")
                        .HasForeignKey("DishInfoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DishInfo");
                });

            modelBuilder.Entity("Recipes.Domain.Entities.Business.Social.Comment", b =>
                {
                    b.HasOne("Recipes.Domain.Entities.Business.Social.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Recipes.Domain.Entities.UserContext.ApplicationUser", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Recipes.Domain.Entities.Business.Social.MediaUnit", b =>
                {
                    b.HasOne("Recipes.Domain.Entities.Business.Social.Post", "Post")
                        .WithOne("MediaUnit")
                        .HasForeignKey("Recipes.Domain.Entities.Business.Social.MediaUnit", "PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Recipes.Domain.Entities.Business.Social.Post", b =>
                {
                    b.HasOne("Recipes.Domain.Entities.Business.Cooking.Dish", "Dish")
                        .WithMany("Posts")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Recipes.Domain.Entities.UserContext.ApplicationUser", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Recipes.Domain.Entities.Business.Social.SocialData", b =>
                {
                    b.HasOne("Recipes.Domain.Entities.Business.Social.Post", "Post")
                        .WithOne("SocialData")
                        .HasForeignKey("Recipes.Domain.Entities.Business.Social.SocialData", "PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Recipes.Domain.Entities.Governance.Moderation.CommentReportData", b =>
                {
                    b.HasOne("Recipes.Domain.Entities.UserContext.ApplicationUser", "Moderator")
                        .WithMany("ModeratedCommentReports")
                        .HasForeignKey("ModeratorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Recipes.Domain.Entities.Governance.Report.CommentReport", "Report")
                        .WithOne("Data")
                        .HasForeignKey("Recipes.Domain.Entities.Governance.Moderation.CommentReportData", "ReportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Recipes.Domain.Entities.Governance.Enumeration.ReportStatus", "Status")
                        .WithMany("CommentReportsData")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Moderator");

                    b.Navigation("Report");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Recipes.Domain.Entities.Governance.Moderation.DishReportData", b =>
                {
                    b.HasOne("Recipes.Domain.Entities.UserContext.ApplicationUser", "Moderator")
                        .WithMany("ModeratedDishReports")
                        .HasForeignKey("ModeratorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Recipes.Domain.Entities.Governance.Report.DishReport", "Report")
                        .WithOne("Data")
                        .HasForeignKey("Recipes.Domain.Entities.Governance.Moderation.DishReportData", "ReportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Recipes.Domain.Entities.Governance.Enumeration.ReportStatus", "Status")
                        .WithMany("DishReportsData")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Moderator");

                    b.Navigation("Report");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Recipes.Domain.Entities.Governance.Moderation.PostReportData", b =>
                {
                    b.HasOne("Recipes.Domain.Entities.UserContext.ApplicationUser", "Moderator")
                        .WithMany("ModeratedPostReports")
                        .HasForeignKey("ModeratorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Recipes.Domain.Entities.Governance.Report.PostReport", "Report")
                        .WithOne("Data")
                        .HasForeignKey("Recipes.Domain.Entities.Governance.Moderation.PostReportData", "ReportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Recipes.Domain.Entities.Governance.Enumeration.ReportStatus", "Status")
                        .WithMany("PostReportsData")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Moderator");

                    b.Navigation("Report");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Recipes.Domain.Entities.Governance.Report.CommentReport", b =>
                {
                    b.HasOne("Recipes.Domain.Entities.Governance.Enumeration.CommentReportClass", "Class")
                        .WithMany("Reports")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Recipes.Domain.Entities.Business.Social.Comment", "Comment")
                        .WithMany("Reports")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Recipes.Domain.Entities.UserContext.ApplicationUser", "User")
                        .WithMany("CommentReports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Recipes.Domain.Entities.Governance.Report.DishReport", b =>
                {
                    b.HasOne("Recipes.Domain.Entities.Governance.Enumeration.DishReportClass", "Class")
                        .WithMany("Reports")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Recipes.Domain.Entities.Business.Cooking.Dish", "Dish")
                        .WithMany("Reports")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Recipes.Domain.Entities.UserContext.ApplicationUser", "User")
                        .WithMany("DishReports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Dish");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Recipes.Domain.Entities.Governance.Report.PostReport", b =>
                {
                    b.HasOne("Recipes.Domain.Entities.Governance.Enumeration.PostReportClass", "Class")
                        .WithMany("Reports")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Recipes.Domain.Entities.Business.Social.Post", "Post")
                        .WithMany("Reports")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Recipes.Domain.Entities.UserContext.ApplicationUser", "User")
                        .WithMany("PostReports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Recipes.Domain.Entities.Business.Cooking.Dish", b =>
                {
                    b.Navigation("DishInfo")
                        .IsRequired();

                    b.Navigation("Favorites");

                    b.Navigation("Plans");

                    b.Navigation("Posts");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("Recipes.Domain.Entities.Business.Cooking.DishInfo", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("IngredientUnits");

                    b.Navigation("Macronutrients")
                        .IsRequired();

                    b.Navigation("Micronutrients")
                        .IsRequired();

                    b.Navigation("Steps");
                });

            modelBuilder.Entity("Recipes.Domain.Entities.Business.Enumerations.Ingredient", b =>
                {
                    b.Navigation("IngredientUnits");
                });

            modelBuilder.Entity("Recipes.Domain.Entities.Business.Enumerations.Level", b =>
                {
                    b.Navigation("DishInfo");
                });

            modelBuilder.Entity("Recipes.Domain.Entities.Business.Enumerations.MeasurementUnit", b =>
                {
                    b.Navigation("IngredientUnits");
                });

            modelBuilder.Entity("Recipes.Domain.Entities.Business.Social.Comment", b =>
                {
                    b.Navigation("Reports");
                });

            modelBuilder.Entity("Recipes.Domain.Entities.Business.Social.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("MediaUnit")
                        .IsRequired();

                    b.Navigation("Reports");

                    b.Navigation("SocialData")
                        .IsRequired();
                });

            modelBuilder.Entity("Recipes.Domain.Entities.Governance.Enumeration.CommentReportClass", b =>
                {
                    b.Navigation("Reports");
                });

            modelBuilder.Entity("Recipes.Domain.Entities.Governance.Enumeration.DishReportClass", b =>
                {
                    b.Navigation("Reports");
                });

            modelBuilder.Entity("Recipes.Domain.Entities.Governance.Enumeration.PostReportClass", b =>
                {
                    b.Navigation("Reports");
                });

            modelBuilder.Entity("Recipes.Domain.Entities.Governance.Enumeration.ReportStatus", b =>
                {
                    b.Navigation("CommentReportsData");

                    b.Navigation("DishReportsData");

                    b.Navigation("PostReportsData");
                });

            modelBuilder.Entity("Recipes.Domain.Entities.Governance.Report.CommentReport", b =>
                {
                    b.Navigation("Data")
                        .IsRequired();
                });

            modelBuilder.Entity("Recipes.Domain.Entities.Governance.Report.DishReport", b =>
                {
                    b.Navigation("Data")
                        .IsRequired();
                });

            modelBuilder.Entity("Recipes.Domain.Entities.Governance.Report.PostReport", b =>
                {
                    b.Navigation("Data")
                        .IsRequired();
                });

            modelBuilder.Entity("Recipes.Domain.Entities.UserContext.ApplicationUser", b =>
                {
                    b.Navigation("CommentReports");

                    b.Navigation("Comments");

                    b.Navigation("DishReports");

                    b.Navigation("Dishes");

                    b.Navigation("FavoriteDishes");

                    b.Navigation("ModeratedCommentReports");

                    b.Navigation("ModeratedDishReports");

                    b.Navigation("ModeratedPostReports");

                    b.Navigation("Plans");

                    b.Navigation("PostReports");

                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
